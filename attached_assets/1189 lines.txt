<!DOCTYPE html>
<html>
<head>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: black;
      font-family: 'Arial', sans-serif;
    }
    canvas {
      display: block;
    }
    .context-menu {
      position: fixed;
      background: rgba(40, 40, 40, 0.95);
      border: 1px solid #555;
      border-radius: 4px;
      padding: 4px 0;
      z-index: 1000;
    }
    .context-menu button {
      display: block;
      width: 100%;
      padding: 8px 16px;
      border: none;
      background: none;
      color: white;
      text-align: left;
      cursor: pointer;
    }
    .context-menu button:hover {
      background: #444;
    }
    .selection-box {
      position: fixed;
      border: 2px solid rgba(0, 120, 255, 0.5);
      background: rgba(0, 120, 255, 0.2);
      pointer-events: none;
    }
    .control-panel {
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(30, 30, 30, 0.85);
      border: 1px solid #555;
      border-radius: 8px;
      color: white;
      width: 250px;
      overflow: hidden;
      transition: height 0.3s;
      z-index: 100;
    }
    .control-panel-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 15px;
      background: rgba(50, 50, 50, 0.9);
      cursor: pointer;
    }
    .control-panel-content {
      padding: 15px;
      max-height: 400px;
      overflow-y: auto;
    }
    .panel-section {
      margin-bottom: 20px;
    }
    .panel-section h3 {
      margin-top: 0;
      margin-bottom: 10px;
      border-bottom: 1px solid #555;
      padding-bottom: 5px;
    }
    .size-control {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
    .size-control label {
      flex: 1;
      margin-right: 10px;
    }
    .size-control input {
      width: 120px;
    }
    .tab-buttons {
      display: flex;
      border-bottom: 1px solid #555;
      margin-bottom: 15px;
    }
    .tab-button {
      padding: 8px 12px;
      background: none;
      border: none;
      color: #aaa;
      cursor: pointer;
    }
    .tab-button.active {
      color: white;
      border-bottom: 2px solid #0088ff;
    }
    .tab-content {
      display: none;
    }
    .tab-content.active {
      display: block;
    }
    .shape-container {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 15px;
    }
    .shape-item {
      width: 60px;
      height: 60px;
      background: rgba(60, 60, 60, 0.7);
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: grab;
      border-radius: 4px;
      position: relative;
    }
    .shape-item:hover {
      background: rgba(80, 80, 80, 0.9);
    }
    .shape-item svg {
      pointer-events: none;
    }
    .value-display {
      min-width: 30px;
      text-align: right;
      margin-left: 8px;
    }
    .power-control {
      margin-bottom: 15px;
    }
    .power-control label {
      display: block;
      margin-bottom: 5px;
      color: #ccc;
    }
    .power-control input[type="range"] {
      width: 100%;
    }
    .power-control button {
      margin-top: 10px;
      padding: 8px 12px;
      background: #0088ff;
      border: none;
      border-radius: 4px;
      color: white;
      cursor: pointer;
    }
    .power-control button:hover {
      background: #0077dd;
    }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>
  <div id="contextMenu" class="context-menu" style="display: none;">
    <button id="copyBtn">Copy</button>
    <button id="cutBtn">Cut</button>
    <button id="pasteBtn">Paste</button>
    <button id="deleteBtn">Delete</button>
  </div>
  <div id="selectionBox" class="selection-box" style="display: none;"></div>

  <!-- Control Panel -->
  <div id="controlPanel" class="control-panel">
    <div id="controlPanelHeader" class="control-panel-header">
      <span>Controls</span>
      <span id="toggleIcon">▼</span>
    </div>
    <div id="controlPanelContent" class="control-panel-content">
      <div class="tab-buttons">
        <button class="tab-button active" data-tab="ballSettings">Ball Settings</button>
        <button class="tab-button" data-tab="shapes">Shapes</button>
        <button class="tab-button" data-tab="powers">Powers</button>
      </div>

      <!-- Ball Settings Tab -->
      <div id="ballSettings" class="tab-content active">
        <div class="panel-section">
          <h3>Size</h3>
          <div class="size-control">
            <label for="ballSizeRange">Ball Size:</label>
            <input type="range" id="ballSizeRange" min="5" max="50" value="20">
            <span id="ballSizeValue">20</span>
          </div>
        </div>
        <div class="panel-section">
          <h3>Physics</h3>
          <div class="size-control">
            <label for="gravityRange">Gravity:</label>
            <input type="range" id="gravityRange" min="0" max="5" value="1" step="0.1">
            <span id="gravityValue">1.0</span>
          </div>
          <div class="size-control">
            <label for="bounceRange">Bounce:</label>
            <input type="range" id="bounceRange" min="0.5" max="2" value="1.3" step="0.1">
            <span id="bounceValue">1.3</span>
          </div>
          <div class="size-control">
            <label for="frictionRange">Friction:</label>
            <input type="range" id="frictionRange" min="0.8" max="1" value="1" step="0.01">
            <span id="frictionValue">1.0</span>
          </div>
        </div>
        <div class="panel-section">
          <h3>Ball Creation</h3>
          <div class="size-control">
            <label for="ballCountRange">Number of Balls:</label>
            <input type="range" id="ballCountRange" min="1" max="50" value="5">
            <span id="ballCountValue">5</span>
          </div>
          <button id="createBallsBtn" class="control-btn">Create Balls</button>
        </div>
      </div>

      <!-- Shapes Tab -->
      <div id="shapes" class="tab-content">
        <div class="panel-section">
          <h3>Drag to Canvas</h3>
          <div class="shape-container">
            <div class="shape-item" data-shape="rectangle">
              <svg width="40" height="40" viewBox="0 0 40 40">
                <rect x="5" y="5" width="30" height="30" fill="#58a5f0" />
              </svg>
            </div>
            <div class="shape-item" data-shape="triangle">
              <svg width="40" height="40" viewBox="0 0 40 40">
                <polygon points="20,5 35,35 5,35" fill="#5cf068" />
              </svg>
            </div>
            <div class="shape-item" data-shape="circle">
              <svg width="40" height="40" viewBox="0 0 40 40">
                <circle cx="20" cy="20" r="15" fill="#f05a5c" />
              </svg>
            </div>
          </div>
          <p style="font-size: 12px; color: #aaa;">Drag shapes to canvas to create obstacles. Right-click to remove.</p>
        </div>
      </div>

      <!-- Powers Tab -->
      <div id="powers" class="tab-content">
        <div class="panel-section">
          <h3>Wind Force</h3>
          <div class="power-control">
            <label for="windStrength">Wind Strength:</label>
            <input type="range" id="windStrength" min="0" max="15" value="0" step="0.1">
            <span id="windStrengthValue">0</span>
          </div>
          <div class="power-control">
            <label for="windDirection">Wind Direction:</label>
            <input type="range" id="windDirection" min="0" max="360" value="0">
            <span id="windDirectionValue">0°</span>
          </div>
          <button id="toggleWind">Enable Wind</button>
        </div>
        
        <!-- Added Magnet section -->
        <div class="panel-section">
          <h3>Magnetic Force</h3>
          <div class="power-control">
            <label for="magneticStrength">Magnet Strength:</label>
            <input type="range" id="magneticStrength" min="0" max="10" value="0" step="0.1">
            <span id="magneticStrengthValue">0</span>
          </div>
          <div class="power-control">
            <label for="magneticType">Magnet Type:</label>
            <select id="magneticType">
              <option value="pull">Pull</option>
              <option value="push">Push</option>
            </select>
          </div>
          <button id="toggleMagnet">Enable Magnet</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const contextMenu = document.getElementById('contextMenu');
    const selectionBox = document.getElementById('selectionBox');
    const controlPanel = document.getElementById('controlPanel');
    const controlPanelHeader = document.getElementById('controlPanelHeader');
    const controlPanelContent = document.getElementById('controlPanelContent');
    const toggleIcon = document.getElementById('toggleIcon');

    function resize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    resize();
    window.addEventListener('resize', resize);

    let isPanelOpen = true;
    controlPanelHeader.addEventListener('click', () => {
      isPanelOpen = !isPanelOpen;
      if (isPanelOpen) {
        controlPanelContent.style.display = 'block';
        toggleIcon.textContent = '▼';
      } else {
        controlPanelContent.style.display = 'none';
        toggleIcon.textContent = '▲';
      }
    });

    document.querySelectorAll('.tab-button').forEach(button => {
      button.addEventListener('click', () => {
        document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));

        button.classList.add('active');
        const tabName = button.getAttribute('data-tab');
        document.getElementById(tabName).classList.add('active');
      });
    });

    const ballSizeRange = document.getElementById('ballSizeRange');
    const ballSizeValue = document.getElementById('ballSizeValue');
    const gravityRange = document.getElementById('gravityRange');
    const gravityValue = document.getElementById('gravityValue');
    const bounceRange = document.getElementById('bounceRange');
    const bounceValue = document.getElementById('bounceValue');
    const frictionRange = document.getElementById('frictionRange');
    const frictionValue = document.getElementById('frictionValue');

    let defaultBallRadius = parseInt(ballSizeRange.value);

    // Update UI display values
    ballSizeRange.addEventListener('input', () => {
      defaultBallRadius = parseInt(ballSizeRange.value);
      ballSizeValue.textContent = defaultBallRadius;
    });

    gravityRange.addEventListener('input', () => {
      gravityValue.textContent = parseFloat(gravityRange.value).toFixed(1);
    });

    bounceRange.addEventListener('input', () => {
      bounceValue.textContent = parseFloat(bounceRange.value).toFixed(1);
    });

    frictionRange.addEventListener('input', () => {
      frictionValue.textContent = parseFloat(frictionRange.value).toFixed(1);
    });

    const ballCountRange = document.getElementById('ballCountRange');
    const ballCountValue = document.getElementById('ballCountValue');

    ballCountRange.addEventListener('input', () => {
      ballCountValue.textContent = ballCountRange.value;
    });

    document.getElementById('createBallsBtn').addEventListener('click', () => {
      const count = parseInt(ballCountRange.value);
      for (let i = 0; i < count; i++) {
        const ball = new Ball(
          Math.random() * canvas.width * 0.8 + canvas.width * 0.1,
          Math.random() * canvas.height * 0.5
        );
        ball.velocityX = (Math.random() - 0.5) * 8;
        ball.velocityY = (Math.random() - 0.5) * 8;
        balls.push(ball);
      }
    });

    let mousePosHistory = [];
    const MOUSE_HISTORY_LENGTH = 5;

    class Ball {
      constructor(x, y) {
        this.x = x;
        this.y = y;
        this.radius = defaultBallRadius;
        this.velocityX = 0;
        this.velocityY = 0;
        this.gravity = parseFloat(gravityRange.value);
        this.friction = parseFloat(frictionRange.value);
        this.bounce = parseFloat(bounceRange.value);
        this.isHeld = false;
        this.hue = Math.random() * 360;
        this.selected = false;
        this.mass = this.radius;
        this.particles = [];
      }

      update() {
        this.gravity = parseFloat(gravityRange.value);
        this.friction = parseFloat(frictionRange.value);
        this.bounce = parseFloat(bounceRange.value);

        if (!this.isHeld) {
          this.velocityY += this.gravity;

          if (wind.enabled) {
            const windAngleRad = (wind.direction * Math.PI) / 180;
            this.velocityX += Math.cos(windAngleRad) * wind.strength / this.mass;
            this.velocityY += Math.sin(windAngleRad) * wind.strength / this.mass;
          }

          if (magnet.enabled) {
            const dxMag = magnet.position.x - this.x;
            const dyMag = magnet.position.y - this.y;
            const distanceMag = Math.sqrt(dxMag * dxMag + dyMag * dyMag);
            if (distanceMag > 0) {
              const force = magnet.strength / (distanceMag * 0.1);
              const dirX = dxMag / distanceMag;
              const dirY = dyMag / distanceMag;
              
              if (magnet.type === 'pull') {
                this.velocityX += dirX * force / this.mass;
                this.velocityY += dirY * force / this.mass;
              } else {
                this.velocityX -= dirX * force / this.mass;
                this.velocityY -= dirY * force / this.mass;
              }
            }
          }

          this.x += this.velocityX;
          this.y += this.velocityY;

          this.velocityX *= this.friction;
          this.velocityY *= this.friction;

          if (this.x + this.radius > canvas.width) {
            this.x = canvas.width - this.radius;
            this.velocityX *= -this.bounce;
          }
          if (this.x - this.radius < 0) {
            this.x = this.radius;
            this.velocityX *= -this.bounce;
          }
          if (this.y + this.radius > canvas.height) {
            this.y = canvas.height - this.radius;
            this.velocityY *= -this.bounce;
          }
          if (this.y - this.radius < 0) {
            this.y = this.radius;
            this.velocityY *= -this.bounce;
          }

          if (Math.abs(this.velocityX) > 0.1 || Math.abs(this.velocityY) > 0.1) {
            this.particles.push({
              x: this.x,
              y: this.y,
              size: Math.random() * 2 + 1,
              alpha: 1,
              color: `hsla(${this.hue}, 100%, 50%, 1)`,
            });
          }

          this.particles = this.particles.map(p => {
            p.alpha -= 0.02;
            p.size -= 0.05;
            return p;
          }).filter(p => p.alpha > 0 && p.size > 0);
        }
      }

      draw() {
        for (const particle of this.particles) {
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          ctx.fillStyle = `hsla(${this.hue}, 100%, 50%, ${particle.alpha})`;
          ctx.fill();
        }

        for (let i = 5; i >= 0; i--) {
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.radius + i * 4, 0, Math.PI * 2);
          ctx.fillStyle = `hsla(${(this.hue + i * 15) % 360}, 100%, 50%, ${0.1})`;
          ctx.fill();
          
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.radius + i * 2, 0, Math.PI * 2);
          ctx.fillStyle = `rgba(255, 255, 255, ${0.1 - i * 0.01})`;
          ctx.fill();
        }

        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = this.selected ? 'rgba(100, 180, 255, 0.8)' : 'rgba(255, 255, 255, 0.8)';
        ctx.fill();

        this.hue = (this.hue + 1) % 360;
      }

      checkCollision(otherBall) {
        const dx = this.x - otherBall.x;
        const dy = this.y - otherBall.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        return distance < this.radius + otherBall.radius;
      }

      handleCollision(otherBall) {
        const dx = this.x - otherBall.x;
        const dy = this.y - otherBall.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        const overlap = this.radius + otherBall.radius - distance;

        const nx = dx / distance;
        const ny = dy / distance;

        const relativeVelocityX = this.velocityX - otherBall.velocityX;
        const relativeVelocityY = this.velocityY - otherBall.velocityY;
        const dotProduct = relativeVelocityX * nx + relativeVelocityY * ny;

        if (dotProduct < 0) {
          const impulse = 2 * dotProduct / (this.radius + otherBall.radius);

          this.velocityX -= impulse * otherBall.radius * nx;
          this.velocityY -= impulse * otherBall.radius * ny;
          otherBall.velocityX += impulse * this.radius * nx;
          otherBall.velocityY += impulse * this.radius * ny;

          const correction = overlap / 2;
          this.x += correction * nx;
          this.y += correction * ny;
          otherBall.x -= correction * nx;
          otherBall.y -= correction * ny;
        }
      }

      checkShapeCollision(shape) {
        if (shape.type === 'rectangle') {
          this.checkRectangleCollision(shape);
        } else if (shape.type === 'triangle') {
          this.checkTriangleCollision(shape);
        } else if (shape.type === 'circle') {
          this.checkCircleCollision(shape);
        }
      }

      checkRectangleCollision(rect) {
        const closestX = Math.max(rect.x, Math.min(this.x, rect.x + rect.width));
        const closestY = Math.max(rect.y, Math.min(this.y, rect.y + rect.height));

        const distanceX = this.x - closestX;
        const distanceY = this.y - closestY;
        const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);

        if (distance < this.radius) {
          let normalX = 0;
          let normalY = 0;

          if (Math.abs(this.x - rect.x) <= this.radius && this.y >= rect.y && this.y <= rect.y + rect.height) {
            normalX = -1;
          } else if (Math.abs(this.x - (rect.x + rect.width)) <= this.radius && this.y >= rect.y && this.y <= rect.y + rect.height) {
            normalX = 1;
          } else if (Math.abs(this.y - rect.y) <= this.radius && this.x >= rect.x && this.x <= rect.x + rect.width) {
            normalY = -1;
          } else if (Math.abs(this.y - (rect.y + rect.height)) <= this.radius && this.x >= rect.x && this.x <= rect.x + rect.width) {
            normalY = 1;
          } else {
            const length = distance;
            normalX = distanceX / length;
            normalY = distanceY / length;
          }

          const dot = this.velocityX * normalX + this.velocityY * normalY;
          this.velocityX = this.velocityX - 2 * dot * normalX;
          this.velocityY = this.velocityY - 2 * dot * normalY;

          this.velocityX *= this.bounce;
          this.velocityY *= this.bounce;

          const penetration = this.radius - distance + 1;
          this.x += normalX * penetration;
          this.y += normalY * penetration;
        }
      }

      checkCircleCollision(circle) {
        // Set radius property for circle shapes
        circle.radius = circle.width / 2;
        
        const dx = this.x - (circle.x + circle.radius);
        const dy = this.y - (circle.y + circle.radius);
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < this.radius + circle.radius) {
          const nx = dx / distance;
          const ny = dy / distance;

          const dot = this.velocityX * nx + this.velocityY * ny;
          this.velocityX = this.velocityX - 2 * dot * nx;
          this.velocityY = this.velocityY - 2 * dot * ny;

          this.velocityX *= this.bounce;
          this.velocityY *= this.bounce;

          const penetration = this.radius + circle.radius - distance + 1;
          this.x += nx * penetration;
          this.y += ny * penetration;
        }
      }

      checkTriangleCollision(triangle) {
        const minX = Math.min(triangle.x1, triangle.x2, triangle.x3);
        const maxX = Math.max(triangle.x1, triangle.x2, triangle.x3);
        const minY = Math.min(triangle.y1, triangle.y2, triangle.y3);
        const maxY = Math.max(triangle.y1, triangle.y2, triangle.y3);

        if (this.x + this.radius < minX || this.x - this.radius > maxX ||
            this.y + this.radius < minY || this.y - this.radius > maxY) {
          return;
        }

        const edges = [
          { x1: triangle.x1, y1: triangle.y1, x2: triangle.x2, y2: triangle.y2 },
          { x2: triangle.x2, y2: triangle.y2, x1: triangle.x3, y1: triangle.y3 },
          { x1: triangle.x3, y1: triangle.y3, x2: triangle.x1, y2: triangle.y1 }
        ];

        let collision = false;
        let closestEdge = null;
        let minEdgeDistance = Infinity;
        let closestPoint = { x: 0, y: 0 };

        for (const edge of edges) {
          const edgeLength = Math.sqrt(
            (edge.x2 - edge.x1) * (edge.x2 - edge.x1) +
            (edge.y2 - edge.y1) * (edge.y2 - edge.y1)
          );

          const edgeX = (edge.x2 - edge.x1) / edgeLength;
          const edgeY = (edge.y2 - edge.y1) / edgeLength;

          const dx = this.x - edge.x1;
          const dy = this.y - edge.y1;

          const projectionLength = dx * edgeX + dy * edgeY;

          let pointX, pointY;

          if (projectionLength < 0) {
            pointX = edge.x1;
            pointY = edge.y1;
          } else if (projectionLength > edgeLength) {
            pointX = edge.x2;
            pointY = edge.y2;
          } else {
            pointX = edge.x1 + projectionLength * edgeX;
            pointY = edge.y1 + projectionLength * edgeY;
          }

          const distX = this.x - pointX;
          const distY = this.y - pointY;
          const distance = Math.sqrt(distX * distX + distY * distY);

          if (distance < this.radius && distance < minEdgeDistance) {
            collision = true;
            minEdgeDistance = distance;
            closestEdge = edge;
            closestPoint = { x: pointX, y: pointY };
          }
        }

        if (collision) {
          const edgeVectorX = closestEdge.x2 - closestEdge.x1;
          const edgeVectorY = closestEdge.y2 - closestEdge.y1;
          const edgeLength = Math.sqrt(edgeVectorX * edgeVectorX + edgeVectorY * edgeVectorY);

          const edgeNormalX = edgeVectorX / edgeLength;
          const edgeNormalY = edgeVectorY / edgeLength;

          let normalX = -edgeNormalY;
          let normalY = edgeNormalX;

          const centerX = (triangle.x1 + triangle.x2 + triangle.x3) / 3;
          const centerY = (triangle.y1 + triangle.y2 + triangle.y3) / 3;

          const toEdgeX = closestPoint.x - centerX;
          const toEdgeY = closestPoint.y - centerY;

          const dotProd = normalX * toEdgeX + normalY * toEdgeY;
          if (dotProd < 0) {
            normalX = -normalX;
            normalY = -normalY;
          }

          const dot = this.velocityX * normalX + this.velocityY * normalY;
          this.velocityX = this.velocityX - 2 * dot * normalX;
          this.velocityY = this.velocityY - 2 * dot * normalY;

          this.velocityX *= this.bounce;
          this.velocityY *= this.bounce;

          const penetration = this.radius - minEdgeDistance + 1;
          this.x += normalX * penetration;
          this.y += normalY * penetration;
        }
      }
    }

    // Define Shape classes
    class Shape {
      constructor(x, y, type) {
        this.x = x;
        this.y = y;
        this.type = type;
      }
    }

    class Rectangle extends Shape {
      constructor(x, y, width, height) {
        super(x, y, 'rectangle');
        this.width = width;
        this.height = height;
      }

      draw() {
        ctx.fillStyle = '#58a5f0';
        ctx.fillRect(this.x, this.y, this.width, this.height);
      }
    }

    class Triangle extends Shape {
      constructor(x, y, size) {
        super(x, y, 'triangle');
        this.size = size;
        this.x1 = x;
        this.y1 = y;
        this.x2 = x + size;
        this.y2 = y + size * 1.5;
        this.x3 = x - size;
        this.y3 = y + size * 1.5;
      }

      draw() {
        ctx.fillStyle = '#5cf068';
        ctx.beginPath();
        ctx.moveTo(this.x1, this.y1);
        ctx.lineTo(this.x2, this.y2);
        ctx.lineTo(this.x3, this.y3);
        ctx.closePath();
        ctx.fill();
      }
    }

    class Circle extends Shape {
      constructor(x, y, width, height) {
        super(x, y, 'circle');
        this.width = width;
        this.height = height;
        this.radius = width / 2;
      }

      draw() {
        ctx.fillStyle = '#f05a5c';
        ctx.beginPath();
        ctx.arc(this.x + this.width/2, this.y + this.height/2, this.width/2, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    let balls = [];
    let shapes = [];
    let mouseX = 0;
    let mouseY = 0;
    let isMouseDown = false;
    let isDragging = false;
    let dragStartX = 0;
    let dragStartY = 0;
    let selectedBalls = [];
    let selectedShapes = [];
    let draggedBall = null;
    let draggedShape = null;
    let isDraggingShape = false;
    let clipboardItems = [];
    let selectionStartPos = { x: 0, y: 0 };

    // Wind settings
    const wind = {
      enabled: false,
      strength: 0,
      direction: 0,
    };

    // Magnet settings
    const magnet = {
      enabled: false,
      strength: 0,
      type: 'pull',
      position: { x: 0, y: 0 }
    };

    // Set up wind controls
    const windStrengthInput = document.getElementById('windStrength');
    const windStrengthValue = document.getElementById('windStrengthValue');
    const windDirectionInput = document.getElementById('windDirection');
    const windDirectionValue = document.getElementById('windDirectionValue');
    const toggleWindBtn = document.getElementById('toggleWind');

    windStrengthInput.addEventListener('input', () => {
      wind.strength = parseFloat(windStrengthInput.value);
      windStrengthValue.textContent = wind.strength.toFixed(1);
    });

    windDirectionInput.addEventListener('input', () => {
      wind.direction = parseInt(windDirectionInput.value);
      windDirectionValue.textContent = `${wind.direction}°`;
    });

    toggleWindBtn.addEventListener('click', () => {
      wind.enabled = !wind.enabled;
      toggleWindBtn.textContent = wind.enabled ? 'Disable Wind' : 'Enable Wind';
    });

    // Set up magnet controls
    const magneticStrengthInput = document.getElementById('magneticStrength');
    const magneticStrengthValue = document.getElementById('magneticStrengthValue');
    const magneticTypeSelect = document.getElementById('magneticType');
    const toggleMagnetBtn = document.getElementById('toggleMagnet');

    magneticStrengthInput.addEventListener('input', () => {
      magnet.strength = parseFloat(magneticStrengthInput.value);
      magneticStrengthValue.textContent = magnet.strength.toFixed(1);
    });

    magneticTypeSelect.addEventListener('change', () => {
      magnet.type = magneticTypeSelect.value;
    });

    toggleMagnetBtn.addEventListener('click', () => {
      magnet.enabled = !magnet.enabled;
      toggleMagnetBtn.textContent = magnet.enabled ? 'Disable Magnet' : 'Enable Magnet';
    });

    // Shape dragging
    const shapeItems = document.querySelectorAll('.shape-item');
    shapeItems.forEach(item => {
      item.addEventListener('mousedown', (e) => {
        const shapeType = item.getAttribute('data-shape');
        const rect = item.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        let newShape;
        if (shapeType === 'rectangle') {
          newShape = new Rectangle(e.clientX, e.clientY, 80, 60);
        } else if (shapeType === 'triangle') {
          newShape = new Triangle(e.clientX, e.clientY, 40);
        } else if (shapeType === 'circle') {
          newShape = new Circle(e.clientX, e.clientY, 60, 60);
        }
        
        draggedShape = newShape;
        isDraggingShape = true;
        
        window.addEventListener('mousemove', shapeDragMove);
        window.addEventListener('mouseup', shapeDragEnd);
        
        e.preventDefault();
      });
    });

    function shapeDragMove(e) {
      if (isDraggingShape && draggedShape) {
        if (draggedShape.type === 'rectangle' || draggedShape.type === 'circle') {
          draggedShape.x = e.clientX - draggedShape.width / 2;
          draggedShape.y = e.clientY - draggedShape.height / 2;
        } else if (draggedShape.type === 'triangle') {
          const dx = e.clientX - draggedShape.x1;
          const dy = e.clientY - draggedShape.y1;
          
          draggedShape.x1 += dx;
          draggedShape.y1 += dy;
          draggedShape.x2 += dx;
          draggedShape.y2 += dy;
          draggedShape.x3 += dx;
          draggedShape.y3 += dy;
          
          draggedShape.x = e.clientX;
          draggedShape.y = e.clientY;
        }
      }
    }

    function shapeDragEnd(e) {
      if (isDraggingShape && draggedShape) {
        shapes.push(draggedShape);
        draggedShape = null;
        isDraggingShape = false;
      }
      
      window.removeEventListener('mousemove', shapeDragMove);
      window.removeEventListener('mouseup', shapeDragEnd);
    }

    // Mouse event listeners
    canvas.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
      
      magnet.position.x = mouseX;
      magnet.position.y = mouseY;

      // Track mouse position history
      mousePosHistory.push({ x: mouseX, y: mouseY });
      if (mousePosHistory.length > MOUSE_HISTORY_LENGTH) {
        mousePosHistory.shift();
      }

      if (isMouseDown && draggedBall) {
        const velocityX = (mouseX - draggedBall.x) * 0.1;
        const velocityY = (mouseY - draggedBall.y) * 0.1;
        
        draggedBall.x = mouseX;
        draggedBall.y = mouseY;
        draggedBall.velocityX = velocityX;
        draggedBall.velocityY = velocityY;
      }

      if (isDragging) {
        const width = mouseX - dragStartX;
        const height = mouseY - dragStartY;
        
        selectionBox.style.display = 'block';
        selectionBox.style.left = `${width > 0 ? dragStartX : mouseX}px`;
        selectionBox.style.top = `${height > 0 ? dragStartY : mouseY}px`;
        selectionBox.style.width = `${Math.abs(width)}px`;
        selectionBox.style.height = `${Math.abs(height)}px`;
      }
    });

    canvas.addEventListener('mousedown', (e) => {
      if (e.button === 0) { // Left click
        isMouseDown = true;
        
        if (!e.ctrlKey && !e.shiftKey) {
          // Clear selection if not adding to selection
          selectedBalls.forEach(ball => { ball.selected = false; });
          selectedBalls = [];
          selectedShapes = [];
        }
        
        for (let i = balls.length - 1; i >= 0; i--) {
          const ball = balls[i];
          const dx = mouseX - ball.x;
          const dy = mouseY - ball.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < ball.radius) {
            ball.isHeld = true;
            draggedBall = ball;
            
            if (!ball.selected) {
              ball.selected = true;
              selectedBalls.push(ball);
            }
            
            return;
          }
        }
        
        // Start selection box
        dragStartX = mouseX;
        dragStartY = mouseY;
        isDragging = true;
        selectionStartPos = { x: mouseX, y: mouseY };
      } else if (e.button === 2) { // Right click
        // Check if right clicked on a shape
        for (let i = shapes.length - 1; i >= 0; i--) {
          const shape = shapes[i];
          let isInside = false;
          
          if (shape.type === 'rectangle') {
            isInside = mouseX >= shape.x && mouseX <= shape.x + shape.width &&
                      mouseY >= shape.y && mouseY <= shape.y + shape.height;
          } else if (shape.type === 'circle') {
            const dx = mouseX - (shape.x + shape.width/2);
            const dy = mouseY - (shape.y + shape.height/2);
            isInside = Math.sqrt(dx*dx + dy*dy) <= shape.width/2;
          } else if (shape.type === 'triangle') {
            const a = area(shape.x1, shape.y1, shape.x2, shape.y2, shape.x3, shape.y3);
            const a1 = area(mouseX, mouseY, shape.x2, shape.y2, shape.x3, shape.y3);
            const a2 = area(shape.x1, shape.y1, mouseX, mouseY, shape.x3, shape.y3);
            const a3 = area(shape.x1, shape.y1, shape.x2, shape.y2, mouseX, mouseY);
            isInside = Math.abs(a - (a1 + a2 + a3)) < 0.1;
          }
          
          if (isInside) {
            shapes.splice(i, 1);
            e.preventDefault();
            return;
          }
        }
        
        // Show context menu
        contextMenu.style.display = 'block';
        contextMenu.style.left = `${mouseX}px`;
        contextMenu.style.top = `${mouseY}px`;
        e.preventDefault();
      }
    });

    function area(x1, y1, x2, y2, x3, y3) {
      return Math.abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0);
    }

    canvas.addEventListener('mouseup', (e) => {
      if (e.button === 0) {
        isMouseDown = false;
        
        if (draggedBall) {
          draggedBall.isHeld = false;
          draggedBall = null;
        }
        
        if (isDragging) {
          isDragging = false;
          selectionBox.style.display = 'none';
          
          // Select balls inside selection box
          const left = Math.min(dragStartX, mouseX);
          const right = Math.max(dragStartX, mouseX);
          const top = Math.min(dragStartY, mouseY);
          const bottom = Math.max(dragStartY, mouseY);
          
          balls.forEach(ball => {
            if (ball.x > left && ball.x < right && ball.y > top && ball.y < bottom) {
              ball.selected = true;
              if (!selectedBalls.includes(ball)) {
                selectedBalls.push(ball);
              }
            }
          });
        }
      }
    });

    canvas.addEventListener('contextmenu', (e) => {
      e.preventDefault();
    });

    // Close context menu when clicking outside of it
    window.addEventListener('click', (e) => {
      if (e.target !== contextMenu && !contextMenu.contains(e.target)) {
        contextMenu.style.display = 'none';
      }
    });

    // Context menu actions
    document.getElementById('copyBtn').addEventListener('click', () => {
      clipboardItems = [];
      selectedBalls.forEach(ball => {
        clipboardItems.push({
          type: 'ball',
          x: ball.x,
          y: ball.y,
          velocityX: ball.velocityX,
          velocityY: ball.velocityY,
          radius: ball.radius,
          hue: ball.hue
        });
      });
      contextMenu.style.display = 'none';
    });

    document.getElementById('cutBtn').addEventListener('click', () => {
      clipboardItems = [];
      selectedBalls.forEach(ball => {
        clipboardItems.push({
          type: 'ball',
          x: ball.x,
          y: ball.y,
          velocityX: ball.velocityX,
          velocityY: ball.velocityY,
          radius: ball.radius,
          hue: ball.hue
        });
        
        const index = balls.indexOf(ball);
        if (index !== -1) {
          balls.splice(index, 1);
        }
      });
      selectedBalls = [];
      contextMenu.style.display = 'none';
    });

    document.getElementById('pasteBtn').addEventListener('click', () => {
      clipboardItems.forEach(item => {
        if (item.type === 'ball') {
          const ball = new Ball(mouseX, mouseY);
          ball.velocityX = item.velocityX;
          ball.velocityY = item.velocityY;
          ball.radius = item.radius;
          ball.hue = item.hue;
          balls.push(ball);
        }
      });
      contextMenu.style.display = 'none';
    });

    document.getElementById('deleteBtn').addEventListener('click', () => {
      selectedBalls.forEach(ball => {
        const index = balls.indexOf(ball);
        if (index !== -1) {
          balls.splice(index, 1);
        }
      });
      selectedBalls = [];
      contextMenu.style.display = 'none';
    });

    // Add initial balls
    for (let i = 0; i < 5; i++) {
      const ball = new Ball(
        Math.random() * canvas.width,
        Math.random() * canvas.height * 0.5
      );
      ball.velocityX = (Math.random() - 0.5) * 8;
      ball.velocityY = (Math.random() - 0.5) * 8;
      balls.push(ball);
    }

    // Animation loop
    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Update balls
      for (let i = 0; i < balls.length; i++) {
        balls[i].update();
        
        for (let j = i + 1; j < balls.length; j++) {
          if (balls[i].checkCollision(balls[j])) {
            balls[i].handleCollision(balls[j]);
          }
        }
        
        for (const shape of shapes) {
          balls[i].checkShapeCollision(shape);
        }
        
        balls[i].draw();
      }
      
      // Draw shapes
      for (const shape of shapes) {
        shape.draw();
      }
      
      // Draw dragged shape
      if (isDraggingShape && draggedShape) {
        draggedShape.draw();
      }
      
      // Draw magnetic field visualization when active
      if (magnet.enabled) {
        const radius = magnet.strength * 20;
        const gradient = ctx.createRadialGradient(
          mouseX, mouseY, 0,
          mouseX, mouseY, radius
        );
        
        if (magnet.type === 'pull') {
          gradient.addColorStop(0, 'rgba(100, 100, 255, 0.5)');
          gradient.addColorStop(1, 'rgba(100, 100, 255, 0)');
        } else {
          gradient.addColorStop(0, 'rgba(255, 100, 100, 0.5)');
          gradient.addColorStop(1, 'rgba(255, 100, 100, 0)');
        }
        
        ctx.beginPath();
        ctx.arc(mouseX, mouseY, radius, 0, Math.PI * 2);
        ctx.fillStyle = gradient;
        ctx.fill();
      }
      
      requestAnimationFrame(animate);
    }

    animate();
  </script>
</body>
</html>